package com.ma2rix.music.web.controller;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.inject.Provider;
import javax.servlet.ServletContext;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.multipart.MultipartFile;

import com.ma2rix.music.model.command.ArrangementCommand;
import com.ma2rix.music.model.command.CompositionCommand;
import com.ma2rix.music.model.dto.ajaxresponse.MusicFileUploadResponse;
import com.ma2rix.music.model.dto.ajaxresponse.CommonFileUploadResponse;
import com.ma2rix.music.service.interfaces.ArrangementService;
import com.ma2rix.music.service.interfaces.CompositionService;
import com.ma2rix.music.service.interfaces.UploadService;
import com.ma2rix.music.service.interfaces.UploadService.UploadType;
import com.ma2rix.music.service.interfaces.UserService;
import com.ma2rix.music.web.security.LoginInfo;

@Controller
@RequestMapping("/upload")
@SessionAttributes()
public class UploadCotroller {
	
	
	public static class UserForward{
		public static final String UPLOAD_FORM_VIEW = "upload/test";
	}
	private static final String file_suffix = "_m2";
	
	@Autowired private ServletContext servletContext;
	@Autowired private UploadService uploadService;
	@Autowired private UserService userService;
	@Autowired private ArrangementService arrangementService;
	@Autowired private CompositionService compositionService;
	@Inject private Provider<LoginInfo> LoginInfoProvider;
	
	private static final String UPLOAD_SUCCESS_MSG = "file upload succeeded";
	private static final String UPLOAD_FAIL_MSG = "file upload failed";
	
	private static final int UPLOAD_SUCCESS_CODE = 1;
	private static final int UPLOAD_FAIL_CODE = 0;
	
	private String domain;
	private String serverRealPath;
	private String contextPath;
	
	@PostConstruct
	public void initUploadSystem( ){
		/*domain = "http://127.0.0.1:8080";*/
		domain = "";
		contextPath = servletContext.getContextPath();
		serverRealPath = servletContext.getRealPath("/");
	}

	/**
	 * 프로파일 이미지 업로드 처리 
	 * @param profileImage		 폼에서 전달받은 이미지 오브젝트 
	 * @param model 			 모델 맵 
	 * @return                  JSON 으로 변환될 FileUploadResponse 오브젝트 
	 */
	@ResponseBody
	@RequestMapping(value = "/profile", method = RequestMethod.POST)
	public CommonFileUploadResponse uploadProfile(
			@RequestParam("profileImage") MultipartFile profileImage ,
			ModelMap model) {
		
		CommonFileUploadResponse fileUploadResponse = new CommonFileUploadResponse();
		LoginInfo loginInfo = LoginInfoProvider.get();
		if (loginInfo == null) {}
		int memberNo = loginInfo.getCurrentUser().getMemberNo();
		try {
			uploadService.uploadProfile(memberNo, profileImage);
			fileUploadResponse.setMessage(UPLOAD_SUCCESS_MSG);
			fileUploadResponse.setResultCode(UPLOAD_SUCCESS_CODE);
			fileUploadResponse.setValue(profileImage.getOriginalFilename());
			fileUploadResponse.setProfileImageWebPath(domain + contextPath + "/profile/" + 
					String.valueOf(memberNo) + "/" + profileImage.getOriginalFilename());
		} catch (Exception e) {
			fileUploadResponse.setMessage(UPLOAD_FAIL_MSG);
			fileUploadResponse.setResultCode(UPLOAD_FAIL_CODE);
			fileUploadResponse.setValue(profileImage.getOriginalFilename());
		}
		return fileUploadResponse;
	}
	
	/**
	 * 
	 * 통합 업로드 컨트롤러 메서드 
	 * 폼에서 전달된 업로드 타입에 따라 타입별 파일 업로드를 처리한다.
	 * 이 컨트롤러에서 직접 익셉션에 따라 AttachFileResponse 객체를 작성해 되돌려 준다.
	 * (직접 서비스 단에서 발생한 예외 처리를 하여 AttachFileResponse 를 작성하여 돌려주게 할 수도 있으며,
	 * 이럴 경우 해당 메서드는 단순이 업로르 메서드만 호출하면 된다.
	 * 
	 * @param uploadType		 업로드 타입을 나타내는 코드값 , 이 값은 UploadType enum 으로 변환된다.
	 * @param musicClassNo 		 해당 업로드 타입별 클래스 번호( 편곡, 작곡, 연주 등의 코드값)
	 * @param musicNo 			 musicClassNo 에 따른 음원 번호  
	 * @param mFile 			 전달된 파일 데이타 
	 * @param model			     뷰에 돌려줄 모델뱁
	 * @return
	 * @throws Exception 
	 */
	
	@ResponseBody
	@RequestMapping(value ="/uploadFile",  method = RequestMethod.POST) 
	public MusicFileUploadResponse upload(
			@RequestParam("uploadType") int uploadType,
			@RequestParam("musicClassNo") String musicClassNo,
			@RequestParam("musicNo") int musicNo,
			@RequestParam("uploadFile") MultipartFile mFile) throws Exception{
		
		MusicFileUploadResponse response = new MusicFileUploadResponse();
		UploadType upType = UploadType.valueOf(uploadType);
		boolean status = false;
		try {
			uploadService.upload(musicNo, upType, mFile);
			status = true;
		} catch (Exception e) {
			status = false;
			e.printStackTrace();
			System.out.println(e.getMessage());
			throw e;
			
		}
		setAttachFileResponse(response,musicNo, upType ,(status? UPLOAD_SUCCESS_CODE:UPLOAD_FAIL_CODE) , mFile);
		return response;
	}

	/**
	 * 테스트 페이지 (업로드)
	 */
	@RequestMapping(value = "/test", method = RequestMethod.GET)
	public String test(ModelMap model) {
		return UserForward.UPLOAD_FORM_VIEW;
	}
	
	/**
	 * 전달받은 매개 변수에 따라 적절한 AttatchFileResponse 오브젝트를 설정함 
	 * @param response 			업로드 결과 오브젝트 
	 * @param musicNo   		해당 분야별 테이블의 주 키 번호 
	 * @param type             업로드 타입
	 * @param resultCode       응답에 사용할 result 코드 
	 * @param mFile				파일 오브젝트 
	 */
	
	private void setAttachFileResponse(MusicFileUploadResponse response,int musicNo,
										   UploadType type,int resultCode, MultipartFile mFile){
		
		if (resultCode == UPLOAD_FAIL_CODE){
			response.setResultCode(UPLOAD_FAIL_CODE);
			response.setValue(mFile.getOriginalFilename());
			response.setMessage(UPLOAD_FAIL_MSG);
		}else {
			response.setResultCode(UPLOAD_SUCCESS_CODE);
			switch(type){
				case ARRANGE_SOUND:
				case ARRANGE_SCORE:
				case ARRANGE_EXTRA:
				case ARRANGE_IMAGE:
				case ARRANGE_COMPLETE_SOUND:
				case ARRANGE_GUIDE_SOUND:
					ArrangementCommand arrangeCommand = arrangementService.getArrangementCommandByArrangeNo(musicNo);
					response.setResultCode(UPLOAD_SUCCESS_CODE);
					response.setMessage(UPLOAD_SUCCESS_MSG);
					response.setValue(mFile.getOriginalFilename());
					response.setImage(arrangeCommand.getArrangeImageWeb());
					response.setFrequencyImage(arrangeCommand.getArrangeSoundPng());
					response.setOgg(arrangeCommand.getArrangeSoundOgg());
					response.setMp3(arrangeCommand.getArrangeSoundMp3());
					return;
					
				case COMPOSE_IMAGE:
				case COMPOSE_SOUND:
				case COMPOSE_SCORE:
					CompositionCommand compositionCommand = compositionService.getCompositionCommandByComposeNo(musicNo);
					response.setResultCode(UPLOAD_SUCCESS_CODE);
					response.setMessage(UPLOAD_SUCCESS_MSG);
					response.setValue(mFile.getOriginalFilename());
					response.setImage(compositionCommand.getComposeImageWeb());
					response.setFrequencyImage(compositionCommand.getComposeSoundPng());
					response.setOgg(compositionCommand.getComposeSoundOgg());
					response.setMp3(compositionCommand.getComposeSoundMp3());
					
					System.out.println(">>response.setValue::"+response.getValue());
					return;
					
				case VOCAL_IMAGE:
				case VOCAL_SOUND:
					return;
				case PERFORM_SOUND:
					return;
			default:break;
			}
		}
	}
}
