package com.ma2rix.music.web.controller;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.ma2rix.music.common.Pagination;
import com.ma2rix.music.manager.AppConstants;
import com.ma2rix.music.manager.ForwardingMessageType;
import com.ma2rix.music.model.command.ArrangeUpdateCommand;
import com.ma2rix.music.model.command.ArrangeVocalCommand;
import com.ma2rix.music.model.command.ArrangementCommand;
import com.ma2rix.music.model.command.CommentCommand;
import com.ma2rix.music.model.command.CompositionCommand;
import com.ma2rix.music.model.command.PerformanceCommand;
import com.ma2rix.music.model.domain.Arrangement;
import com.ma2rix.music.model.domain.Code;
import com.ma2rix.music.model.domain.Composition;
import com.ma2rix.music.model.domain.Genre;
import com.ma2rix.music.model.domain.Performance;
import com.ma2rix.music.model.domain.PlayField;
import com.ma2rix.music.model.domain.SongWriting;
import com.ma2rix.music.model.domain.Vocal;
import com.ma2rix.music.model.domain.Workspace;
import com.ma2rix.music.model.dto.ForwardingMessage;
import com.ma2rix.music.model.dto.MemberMessageType;
import com.ma2rix.music.model.dto.ajaxresponse.AjaxResultBase;
import com.ma2rix.music.model.dto.ajaxresponse.GenericResponse;
import com.ma2rix.music.service.interfaces.ArrangeVocalService;
import com.ma2rix.music.service.interfaces.ArrangementService;
import com.ma2rix.music.service.interfaces.CodeService;
import com.ma2rix.music.service.interfaces.CommentService;
import com.ma2rix.music.service.interfaces.CompositionService;
import com.ma2rix.music.service.interfaces.GenreService;
import com.ma2rix.music.service.interfaces.PlayFieldService;
import com.ma2rix.music.service.interfaces.UserService;
import com.ma2rix.music.service.interfaces.WorkspaceService;
import com.ma2rix.music.web.security.LoginInfo;
import com.ma2rix.music.web.validator.ArrangementUpdateValidator;

@Controller
@SessionAttributes({"workspaceUpdateCommand"})
@RequestMapping("/workspace")
public class WorkspaceController extends ApplicationController{
	
	/**
	 * 요청에 대해서 Forwarding 하기 위한 내부 클래스 
	 *
	 */
	public static class WorkspaceForward {
		public static final String WORKSPACE_LIST 				        = "workspace/workspaceAllView"; 
		public static final String LOGIN_FORM_VIEW 						= "user/login";
	}
	
	/**
	 * 재지정(304) redirect하기 위한 내부 클래스 
	 *
	 */
	public static class ArrangeRedirect{
		public static final String LOGIN 									= "redirect:/user/login";
	}
	
	public static class pageType{
		public static final String ARRANGE_INDEX 						= "redirect:/arrange/index";		
	}
	
	
	public static ArrayList<MemberMessageType> memberMessageTypes;
	
	static {
		memberMessageTypes= new ArrayList<MemberMessageType>();
		memberMessageTypes.add(new MemberMessageType("01", "편곡 참여 요청"));
		memberMessageTypes.add(new MemberMessageType("02", "연주 참여 요청"));
		memberMessageTypes.add(new MemberMessageType("03", "보컬 참여 요청"));
		memberMessageTypes.add(new MemberMessageType("04", "일반 메세지"));
	}
	
	@Autowired private WorkspaceService workspaceService;
	
	/**
	 * Workspace 리스트에 대한 요청 처리  
	 * 
	 */
	@RequestMapping(value ="/workspaceList", method = RequestMethod.GET)
	public String arrangeRemoteList(
			@RequestParam("listType") int listType, 
			ModelMap model) {
	
		LoginInfo loginInfo = loginInfoProvider.get();
        int memberNo;

        // TODO 로그인 안했을시 로그인 페이지로 이동. 이 부분은 나중에 로그인 정책 정해지면 삭제 
		try {
			memberNo = loginInfo.getCurrentUser().getMemberNo();  
		} catch (NullPointerException e) {
		     return  ArrangeRedirect.LOGIN;
		}
		
		String memberImage = loginInfo.getCurrentUser().getMemberImage();
		
		int fanCount = workspaceService.getFanCount(memberNo);
        int sponsorAmount = workspaceService.getSponsorAmount(memberNo);
        // TODO INCOME 부분 지불이나 정산 테이블 업무 정의 돼면 추가 
        ArrayList<Code> myPart = workspaceService.getMyPart(memberNo);
        
        String codeName = "";
        for (int cnt = 0; cnt < myPart.size(); cnt++) {
        	Code code = myPart.get(cnt);
        	String codeNameTemp = code.getCodeName();
        	if (cnt < myPart.size() - 1){
        		codeName += codeNameTemp + " | "; 
        	} else {
        		codeName += codeNameTemp;
        	}
        }

        String composeStatus = AppConstants.ComposeStatus.COMPOSING;    //  작곡상태 : 02 작곡중 
		ArrayList<Workspace> ongoingComposeProjects = workspaceService.getProjectsByComposeMemberNoAndComposeStatus(
				memberNo, composeStatus);
		int ongoingComposeProjectsCount = ongoingComposeProjects.size();
		
        composeStatus = AppConstants.ComposeStatus.COMPOSE_COMPLETED;    //  작곡상태 : 03 작곡완료 
		ArrayList<Workspace> completedComposedProjects = workspaceService.getProjectsByComposeMemberNoAndComposeStatus(
				memberNo, composeStatus);
		int completedComposeProjectsCount = completedComposedProjects.size();
		
        String arrangeStatus = AppConstants.ArrangeStatus.ARRANGING;    //  편곡상태 : 02 편곡중 
		ArrayList<Arrangement> ongoingArrangeProjects = workspaceService.getProjectsByArrangeMemberNoAndArrangeMemberStatus(
				memberNo, arrangeStatus);
		int ongoingArrangeProjectsCount = ongoingArrangeProjects.size();
		
		arrangeStatus = AppConstants.ArrangeStatus.ARRANGE_COMPLETED;    //  편곡상태 : 03 편곡완료
		ArrayList<Arrangement> completedArrangeProjects = workspaceService.getProjectsByArrangeMemberNoAndArrangeMemberStatus(
				memberNo, arrangeStatus);
		int completedArrangeProjectsCount = completedArrangeProjects.size();
		
		String performStatus = AppConstants.PerformStatus.REGISTERING_PERFORM;    //  연주상태 : 01  연주등록중
		ArrayList<Performance> ongoingPerformProjects = workspaceService.getProjectsByperformMemberNoperformStatus(
				memberNo, performStatus);
		int ongoingPerformProjectsCount = ongoingPerformProjects.size();
		
		performStatus = AppConstants.PerformStatus.PERFORM_COMPLETED;    //  연주상태 : 02 연주등록완료
		ArrayList<Performance> completedPerformProjects = workspaceService.getProjectsByperformMemberNoperformStatus(
				memberNo, performStatus);
		int completedPerformProjectsCount = completedPerformProjects.size();
		
		String vocalStatus = AppConstants.VocalStatus.REGISTER_VOCAL;    //  보컬상태 : 01  보컬등록중
		ArrayList<Vocal> ongoingVocalProjects = workspaceService.getProjectsByVocalMemberNoVocalStatus(
				memberNo, vocalStatus);
		int ongoingVocalProjectsCount = ongoingVocalProjects.size();
		
		vocalStatus = AppConstants.VocalStatus.VOCAL_COMPLETED;    //  보컬상태 : 02 보컬등록완료
		ArrayList<Vocal> completedVocalProjects = workspaceService.getProjectsByVocalMemberNoVocalStatus(
				memberNo, vocalStatus);
		int completedVocalProjectsCount = completedVocalProjects.size();
		
		String writeStatus = AppConstants.LylicsStatus.LYLICS_REGISTER_COMPLETED;    //  작사상태 : 02 작사등록완료
		ArrayList<SongWriting> completedWriteProjects = workspaceService.getProjectsByWriteMemberNoWriteStatus(
				memberNo, writeStatus);
		int completedWriteProjectsCount = completedWriteProjects.size();

		model.addAttribute("memberImage", memberImage);
		model.addAttribute("fanCount", fanCount);
		model.addAttribute("sponsorAmount", sponsorAmount);
		model.addAttribute("codeName", codeName);

		model.addAttribute("ongoingComposeProjects", ongoingComposeProjects);
		model.addAttribute("ongoingComposeProjectsCount", ongoingComposeProjectsCount);
		model.addAttribute("completedComposedProjects", completedComposedProjects);
		model.addAttribute("completedprojectsCount", completedComposeProjectsCount);
		model.addAttribute("ongoingArrangeProjects", ongoingArrangeProjects);
		model.addAttribute("ongoingArrangeProjectsCount", ongoingArrangeProjectsCount );
		model.addAttribute("completedArrangeProjects", completedArrangeProjects);
		model.addAttribute("completedArrangeProjectsCount", completedArrangeProjectsCount);
		model.addAttribute("ongoingPerformProjects", ongoingPerformProjects);
		model.addAttribute("ongoingPerformProjectsCount", ongoingPerformProjectsCount);
		model.addAttribute("completedPerformProjects", completedPerformProjects);
		model.addAttribute("completedPerformProjectsCount", completedPerformProjectsCount);
		model.addAttribute("ongoingVocalProjects", ongoingVocalProjects);
		model.addAttribute("ongoingVocalProjectsCount", ongoingVocalProjectsCount);
		model.addAttribute("completedVocalProjects", completedVocalProjects);
		model.addAttribute("completedVocalProjectsCount", completedVocalProjectsCount);
		model.addAttribute("completedWriteProjects", completedWriteProjects);
		model.addAttribute("completedWriteProjectsCount", completedWriteProjectsCount);

		return  WorkspaceForward.WORKSPACE_LIST;
	}
	
}

